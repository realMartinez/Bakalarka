{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Martin\\\\Documents\\\\React\\\\viterbivisualizer\\\\src\\\\TrellisGraph.js\",\n  _s = $RefreshSig$();\n// src/components/TrellisGraph.jsx\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TrellisGraph = ({\n  nodes,\n  links\n}) => {\n  _s();\n  const svgRef = useRef();\n  const [dimensions, setDimensions] = useState({\n    width: 0,\n    height: 0\n  });\n  useEffect(() => {\n    // Function to update dimensions\n    const updateDimensions = () => {\n      const width = svgRef.current.parentNode.clientWidth;\n      const height = svgRef.current.parentNode.clientHeight;\n      setDimensions({\n        width,\n        height\n      });\n    };\n\n    // Initial dimensions setup\n    updateDimensions();\n\n    // Set up resize event listener\n    window.addEventListener(\"resize\", updateDimensions);\n\n    // Clean up the event listener on component unmount\n    return () => window.removeEventListener(\"resize\", updateDimensions);\n  }, []);\n  useEffect(() => {\n    const {\n      width,\n      height\n    } = dimensions;\n\n    // Check if dimensions are available\n    if (width === 0 || height === 0) return;\n    const svg = d3.select(svgRef.current);\n    svg.attr(\"width\", width).attr(\"height\", height);\n\n    // Clear previous render\n    svg.selectAll(\"*\").remove();\n\n    // Define scales for positioning nodes\n    const xScale = d3.scalePoint().domain(nodes.map(node => node.time)).range([20, width - 20]);\n    const yScale = d3.scalePoint().domain([\"00\", \"01\", \"10\", \"11\"]).range([20, height - 20]);\n\n    // Draw links (transitions between states)\n    svg.selectAll(\"line\").data(links).join(\"line\").attr(\"x1\", d => xScale(d.source.time)).attr(\"y1\", d => yScale(d.source.state)).attr(\"x2\", d => xScale(d.target.time)).attr(\"y2\", d => yScale(d.target.state)).attr(\"stroke\", \"black\").attr(\"stroke-width\", 1);\n\n    // Draw nodes (states at each time step)\n    svg.selectAll(\"circle\").data(nodes).join(\"circle\").attr(\"cx\", d => xScale(d.time)).attr(\"cy\", d => yScale(d.state)).attr(\"r\", 5).attr(\"fill\", \"blue\");\n\n    // Add labels to nodes\n    svg.selectAll(\"text\").data(nodes).join(\"text\").attr(\"x\", d => xScale(d.time)).attr(\"y\", d => yScale(d.state) - 10).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"10px\").text(d => d.state);\n  }, [nodes, links, dimensions]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: svgRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 10\n  }, this);\n};\n_s(TrellisGraph, \"+ItROes5pZdVbiwPTjmz/QMGq9U=\");\n_c = TrellisGraph;\nexport default TrellisGraph;\nvar _c;\n$RefreshReg$(_c, \"TrellisGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","TrellisGraph","nodes","links","_s","svgRef","dimensions","setDimensions","width","height","updateDimensions","current","parentNode","clientWidth","clientHeight","window","addEventListener","removeEventListener","svg","select","attr","selectAll","remove","xScale","scalePoint","domain","map","node","time","range","yScale","data","join","d","source","state","target","text","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Martin/Documents/React/viterbivisualizer/src/TrellisGraph.js"],"sourcesContent":["// src/components/TrellisGraph.jsx\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport * as d3 from \"d3\";\r\n\r\nconst TrellisGraph = ({ nodes, links }) => {\r\n  const svgRef = useRef();\r\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\r\n\r\n  useEffect(() => {\r\n    // Function to update dimensions\r\n    const updateDimensions = () => {\r\n      const width = svgRef.current.parentNode.clientWidth;\r\n      const height = svgRef.current.parentNode.clientHeight;\r\n      setDimensions({ width, height });\r\n    };\r\n\r\n    // Initial dimensions setup\r\n    updateDimensions();\r\n\r\n    // Set up resize event listener\r\n    window.addEventListener(\"resize\", updateDimensions);\r\n\r\n    // Clean up the event listener on component unmount\r\n    return () => window.removeEventListener(\"resize\", updateDimensions);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const { width, height } = dimensions;\r\n\r\n    // Check if dimensions are available\r\n    if (width === 0 || height === 0) return;\r\n\r\n    const svg = d3.select(svgRef.current);\r\n    svg.attr(\"width\", width).attr(\"height\", height);\r\n\r\n    // Clear previous render\r\n    svg.selectAll(\"*\").remove();\r\n\r\n    // Define scales for positioning nodes\r\n    const xScale = d3\r\n      .scalePoint()\r\n      .domain(nodes.map((node) => node.time))\r\n      .range([20, width - 20]);\r\n\r\n    const yScale = d3\r\n      .scalePoint()\r\n      .domain([\"00\", \"01\", \"10\", \"11\"])\r\n      .range([20, height - 20]);\r\n\r\n    // Draw links (transitions between states)\r\n    svg\r\n      .selectAll(\"line\")\r\n      .data(links)\r\n      .join(\"line\")\r\n      .attr(\"x1\", (d) => xScale(d.source.time))\r\n      .attr(\"y1\", (d) => yScale(d.source.state))\r\n      .attr(\"x2\", (d) => xScale(d.target.time))\r\n      .attr(\"y2\", (d) => yScale(d.target.state))\r\n      .attr(\"stroke\", \"black\")\r\n      .attr(\"stroke-width\", 1);\r\n\r\n    // Draw nodes (states at each time step)\r\n    svg\r\n      .selectAll(\"circle\")\r\n      .data(nodes)\r\n      .join(\"circle\")\r\n      .attr(\"cx\", (d) => xScale(d.time))\r\n      .attr(\"cy\", (d) => yScale(d.state))\r\n      .attr(\"r\", 5)\r\n      .attr(\"fill\", \"blue\");\r\n\r\n    // Add labels to nodes\r\n    svg\r\n      .selectAll(\"text\")\r\n      .data(nodes)\r\n      .join(\"text\")\r\n      .attr(\"x\", (d) => xScale(d.time))\r\n      .attr(\"y\", (d) => yScale(d.state) - 10)\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"font-size\", \"10px\")\r\n      .text((d) => d.state);\r\n  }, [nodes, links, dimensions]);\r\n\r\n  return <svg ref={svgRef}></svg>;\r\n};\r\n\r\nexport default TrellisGraph;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,KAAKC,EAAE,MAAM,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,YAAY,GAAGA,CAAC;EAAEC,KAAK;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EACzC,MAAMC,MAAM,GAAGT,MAAM,CAAC,CAAC;EACvB,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC;IAAEW,KAAK,EAAE,CAAC;IAAEC,MAAM,EAAE;EAAE,CAAC,CAAC;EAErEd,SAAS,CAAC,MAAM;IACd;IACA,MAAMe,gBAAgB,GAAGA,CAAA,KAAM;MAC7B,MAAMF,KAAK,GAAGH,MAAM,CAACM,OAAO,CAACC,UAAU,CAACC,WAAW;MACnD,MAAMJ,MAAM,GAAGJ,MAAM,CAACM,OAAO,CAACC,UAAU,CAACE,YAAY;MACrDP,aAAa,CAAC;QAAEC,KAAK;QAAEC;MAAO,CAAC,CAAC;IAClC,CAAC;;IAED;IACAC,gBAAgB,CAAC,CAAC;;IAElB;IACAK,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAEN,gBAAgB,CAAC;;IAEnD;IACA,OAAO,MAAMK,MAAM,CAACE,mBAAmB,CAAC,QAAQ,EAAEP,gBAAgB,CAAC;EACrE,CAAC,EAAE,EAAE,CAAC;EAENf,SAAS,CAAC,MAAM;IACd,MAAM;MAAEa,KAAK;MAAEC;IAAO,CAAC,GAAGH,UAAU;;IAEpC;IACA,IAAIE,KAAK,KAAK,CAAC,IAAIC,MAAM,KAAK,CAAC,EAAE;IAEjC,MAAMS,GAAG,GAAGpB,EAAE,CAACqB,MAAM,CAACd,MAAM,CAACM,OAAO,CAAC;IACrCO,GAAG,CAACE,IAAI,CAAC,OAAO,EAAEZ,KAAK,CAAC,CAACY,IAAI,CAAC,QAAQ,EAAEX,MAAM,CAAC;;IAE/C;IACAS,GAAG,CAACG,SAAS,CAAC,GAAG,CAAC,CAACC,MAAM,CAAC,CAAC;;IAE3B;IACA,MAAMC,MAAM,GAAGzB,EAAE,CACd0B,UAAU,CAAC,CAAC,CACZC,MAAM,CAACvB,KAAK,CAACwB,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,CAAC,CAAC,CACtCC,KAAK,CAAC,CAAC,EAAE,EAAErB,KAAK,GAAG,EAAE,CAAC,CAAC;IAE1B,MAAMsB,MAAM,GAAGhC,EAAE,CACd0B,UAAU,CAAC,CAAC,CACZC,MAAM,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAChCI,KAAK,CAAC,CAAC,EAAE,EAAEpB,MAAM,GAAG,EAAE,CAAC,CAAC;;IAE3B;IACAS,GAAG,CACAG,SAAS,CAAC,MAAM,CAAC,CACjBU,IAAI,CAAC5B,KAAK,CAAC,CACX6B,IAAI,CAAC,MAAM,CAAC,CACZZ,IAAI,CAAC,IAAI,EAAGa,CAAC,IAAKV,MAAM,CAACU,CAAC,CAACC,MAAM,CAACN,IAAI,CAAC,CAAC,CACxCR,IAAI,CAAC,IAAI,EAAGa,CAAC,IAAKH,MAAM,CAACG,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CACzCf,IAAI,CAAC,IAAI,EAAGa,CAAC,IAAKV,MAAM,CAACU,CAAC,CAACG,MAAM,CAACR,IAAI,CAAC,CAAC,CACxCR,IAAI,CAAC,IAAI,EAAGa,CAAC,IAAKH,MAAM,CAACG,CAAC,CAACG,MAAM,CAACD,KAAK,CAAC,CAAC,CACzCf,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CACvBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;;IAE1B;IACAF,GAAG,CACAG,SAAS,CAAC,QAAQ,CAAC,CACnBU,IAAI,CAAC7B,KAAK,CAAC,CACX8B,IAAI,CAAC,QAAQ,CAAC,CACdZ,IAAI,CAAC,IAAI,EAAGa,CAAC,IAAKV,MAAM,CAACU,CAAC,CAACL,IAAI,CAAC,CAAC,CACjCR,IAAI,CAAC,IAAI,EAAGa,CAAC,IAAKH,MAAM,CAACG,CAAC,CAACE,KAAK,CAAC,CAAC,CAClCf,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CACZA,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC;;IAEvB;IACAF,GAAG,CACAG,SAAS,CAAC,MAAM,CAAC,CACjBU,IAAI,CAAC7B,KAAK,CAAC,CACX8B,IAAI,CAAC,MAAM,CAAC,CACZZ,IAAI,CAAC,GAAG,EAAGa,CAAC,IAAKV,MAAM,CAACU,CAAC,CAACL,IAAI,CAAC,CAAC,CAChCR,IAAI,CAAC,GAAG,EAAGa,CAAC,IAAKH,MAAM,CAACG,CAAC,CAACE,KAAK,CAAC,GAAG,EAAE,CAAC,CACtCf,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC7BA,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CACzBiB,IAAI,CAAEJ,CAAC,IAAKA,CAAC,CAACE,KAAK,CAAC;EACzB,CAAC,EAAE,CAACjC,KAAK,EAAEC,KAAK,EAAEG,UAAU,CAAC,CAAC;EAE9B,oBAAON,OAAA;IAAKsC,GAAG,EAAEjC;EAAO;IAAAkC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AACjC,CAAC;AAACtC,EAAA,CAhFIH,YAAY;AAAA0C,EAAA,GAAZ1C,YAAY;AAkFlB,eAAeA,YAAY;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}